#if !defined(_HER_)
#  define _HER_

class model_data : public ad_comm{
  int b_simulation_flag;
  int rseed;
  int retro_yrs;
  data_int DEBUG_FLAG;
  init_adstring DataFile;
  init_adstring ControlFile;
  data_int dat_syr;
  data_int dat_nyr;
  data_int mod_syr;
  data_int mod_nyr;
  data_int sage;
  data_int nage;
  int rec_syr;
  dvector age;
  data_int nFecBlocks;
  data_ivector nFecBlockYears;
  data_vector fec_slope;
  data_vector fec_inter;
  data_matrix data_ct_raw;
  data_matrix data_sp_waa;
  data_matrix data_cm_waa;
  data_matrix data_cm_comp;
  data_matrix data_sp_comp;
  data_matrix data_egg_dep;
  data_matrix data_mileday;
  dvector avg_sp_waa;
  dmatrix Eij;
  data_int dat_eof;
  int n_theta;
  data_matrix theta_DM;
  dvector theta_ival;
  dvector theta_lb;
  dvector theta_ub;
  ivector theta_phz;
  ivector theta_iprior;
  dvector theta_p1;
  dvector theta_p2;
  data_int nMatBlocks;
  data_matrix maturity_cont;
  dvector mat_a50;
  dvector mat_a95;
  ivector mat_phz;
  ivector nMatBlockYear;
  data_int mort_type;
  data_int mort_dev_phz;
  data_int nMortBlocks;
  data_ivector nMortBlockYear;
  int nSlxCols;
  data_int nSlxBlks;
  data_matrix selex_cont;
  ivector nSelType;
  ivector nslx_phz;
  ivector nslx_rows;
  ivector nslx_cols;
  ivector nslx_syr;
  ivector nslx_nyr;
  data_int nMiscCont;
  data_vector dMiscCont;
  dmatrix data_catch;
  data_int ctl_eof;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value nll_total;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}

};
#endif
