2*2
t.test(rnorm(1000),rnorm(1000))
t.test(rnorm(10000),rnorm(10000))
t.test(rnorm(100000),rnorm(100000))
t.test(rnorm(1000000),rnorm(1000000))
?nls
require(graphics)#
#
DNase1 <- subset(DNase, Run == 1)#
#
## using a selfStart model#
fm1DNase1 <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), DNase1)#
summary(fm1DNase1)
DNasel
DNase1
require(graphics)#
#
DNase1 <- subset(DNase, Run == 1)#
#
## using a selfStart model#
fm1DNase1 <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), DNase1)#
summary(fm1DNase1)
SSlogis
?SSlogis
df=data.frame(x=1:10,y=3*x+4*rnorm(length(x)))
x=1:10y=3*x+4*rnorm(length(x)))
x=1:10
y=3*x+2+rnorm(length(x))
y
plot(x,y)
y=3*x+2+rnorm(length(x,0,2))
y=3*x+2+rnorm(length(x),0,2))
y=3*x+2+rnorm(length(x),0,2)
pllot(x,y)
plot(x,y)
df=dataframe(x=x,y=y)
df=data.frame(x=x,y=y)
df
nls(y~a*x+b,df)
SSlogis
?reshape
df3 <- data.frame(id=1:4, age=c(40,50,60,50), dose1=c(1,2,1,2),#
                  dose2=c(2,1,2,1), dose4=c(3,3,3,3))#
reshape(df3, direction="long", varying=3:5, sep="")
df
df3
df3 <- data.frame(id=1:4, age=c(40,50,60,50), dose1=c(1,2,1,2),#
                  dose2=c(2,1,2,1), dose4=c(3,3,3,3))#
reshape(df3, direction="long", varying=3:5, sep="")
librRY(SPAITITAL)
library(spatial)
ls
ls()
library(spatial)
ls()
 library(tcltk)
f <- function(){plot(rnorm(1000)); tkcmd("after", 1000,f)}
f()
f <- function(){plot(rnorm(1000)); tkl("after", 1000,f)}
f()
f <- function(){plot(rnorm(1000)); tklcmd("after", 1000,f)}
f()
help("Defunct")
library(PBDmodelling)
library(PBSmodelling)
runExamples()
library(caTools)
# create simple animated GIF (using # but only way I know of displaying x <- y <- seq(-4*pi, 4*pi, len=200) r <- sqrt(outer(x^2, y^2, "+")) image = array(0, c(200, 200, 10)) for(i in 1:10) image[,,i] = cos(r-(2*pi*i/10))/(r^.25) write.gif(image, "wave.gif", col="rainbow")y = read.gif("wave.gif") for(i in 1:10) image(y$image[,,i], col=y$col, breaks=(0:256)-0.5, asp=1) # browseURL("file://wave.gif") # inspect GIF file on your hard disk
# create simple animated GIF (using # but only way I know of displaying #
x <- y <- seq(-4*pi, 4*pi, len=200)#
 r <- sqrt(outer(x^2, y^2, "+")) #
 image = array(0, c(200, 200, 10))#
  for(i in 1:10) image[,,i] = cos(r-(2*pi*i/10))/(r^.25)#
  write.gif(image, "wave.gif", col="rainbow")#
y = read.gif("wave.gif") #
for(i in 1:10) image(y$image[,,i], col=y$col, breaks=(0:256)-0.5, asp=1) #
# browseURL("file://wave.gif") # inspect GIF file on your hard disk
browseURL("file://wave.gif")
 library(tcltk)
 f <- function(){#
 	plot(rnorm(1000))#
 	after [1000] f()#
 	}
 f <- function()#
 {#
 	plot(rnorm(1000))#
 	after [1000] f#
 }
 f <- function()#
 {#
 	plot(rnorm(1000))#
 	tclcmd("after",1000,f)#
 }
f()
 f <- function()#
 {#
 	plot(rnorm(1000))#
 	tcl("after",1000,f)#
 }
f()
f<-NULL
library(PBSmapping)#
load(worldLL)#
plotMap(worldLL)
library(tcltk)#
library(PBSmapping)#
data(worldLL)#
plotMap(worldLL)#
px=runif(100,150,260)#
py=runif(100,-50,50)#
ps=cbind(px,py)#
ii=0#
iimax=length(ps[,1])#
 #
 f=function()#
 {#
   if(ii==iimax)f=NULL#
   ii<<-ii+1#
   plotMap(worldLL)#
 	points(ps[ii,1],ps[ii,2],pch=19,col="orange")#
   tcl("after",1000,f)#
 #
 }#
f()
library(tcltk)#
library(PBSmapping)#
data(worldLL)#
px=runif(100,150,260)#
py=runif(100,-50,50)#
ps=cbind(px,py)#
ii=0#
iimax=length(ps[,1])#
 #
 f=function()#
 {#
   if(ii==iimax)f=NULL#
   ii<<-ii+1#
   plotMap(worldLL)#
 	points(ps[ii,1],ps[ii,2],pch=19,col="orange")#
   tcl("after",1000,f)#
 #
 }#
#
f()
A=matrix(c(1,2,3,4),ncol=2)
A
A=matrix(c(1,3,4,3),ncol=2)
A
I
I(2)
diag(A)
A=matrix(c(1,4,2,3),ncol=2)
A
diag(A)
Id=matrix(c(1,0,0,1),ncol=2)
Id
eigen(A)
D(A)
Det(A)
I(A)
?I
hist(sum(rnorm(1)))
sum(rnorm(1)^2))
sum(rnorm(1)^2)
apply(rep(1,100),function(x)sum(rnorm(x)^2))
apply(rep(1,100),FUN=function(x)sum(rnorm(x)^2))
rep(1,100)
apply(rep(1,100),FUN=function(x)sum(rnorm(x)^2)))
sapply(rep(1,100),FUN=function(x)sum(rnorm(x)^2))
hist(sapply(rep(1,100),FUN=function(x)sum(rnorm(x)^2)))
hist(sapply(rep(3,1000),FUN=function(x)sum(rnorm(x)^2)))
hist(sapply(rep(5,1000),FUN=function(x)sum(rnorm(x)^2)))
hist(sapply(rep(30,1000),FUN=function(x)sum(rnorm(x)^2)))
multinomial
pmultinomial
pmultinom
?rbinom
dmultinom(c(30,14,34,45,57,20),prob=c(0.1,0.1,0.15,0.2,0.3.0.15))
dmultinom(c(30,14,34,45,57,20),prob=c(0.1,0.1,0.15,0.2,0.3,0.15))
x=c(30,14,34,45,57,20)
p=c(0.1,0.1,0.15,0.2,0.3,0.15)
dmultinom(x,p)
dmultinom(x,prob=p)
dmultinom(sum(x)*p,prob=p)
1/(1+exp(100))
1/(1+exp(0.001))
1/(1+exp(0.0000001))
exp(1)/(1+exp(1))
exp(.1)/(1+exp(.1))
exp(10)/(1+exp(10))
x=.5
exp(-x)*exp(-exp(-x))
x=seq(-.1,.1,length=100)
exp(-x)*exp(-exp(-x))
x=seq(-.01,10,length=100)
exp(-x)*exp(-exp(-x))
hist(exp(-x)*exp(-exp(-x)))
x=seq(-.001,100,length=100)
hist(exp(-x)*exp(-exp(-x)))
 lm
?lm
lp=read.table(pipe="pbpaste")
lp=read.table(pipe("pbpaste"))
plot(lp)
x=scan()
x
density(x)
abline(density(x))
lines(density(x))
x=scan()
plot(x)
exp(1/2)
1/exp(1/2)
1/exp(1/2.09)
setwd('/Users/robertahrens/Documents/ADMB Course May 2011/pm_sim_sam')
# R-code for the production model.#
require(MCMCpack)#
require(hacks)#
source("read.admb.r")#
A = read.admb("pm")#
par(mfcol=c(2, 2), las=1)#
#
with(A, {#
	plot(iyr, bt, type="l", xlab="Year", ylab="Biomass")#
	gletter(1)#
	#
	plot(iyr,ct/bt,type="o", xlab="Year", ylab="Exploitation rate")#
	gletter(2)#
	#
	plot(iyr,it,type="l",xlab="Year",ylab="CPUE", #
		ylim=c(0, max(it, yt)))#
	points(iyr, yt, pch=20)#
	gletter(3)#
	#
	plot(iyr,nu,type="h",xlab="Year", ylab="CPUE residual")#
	gletter(4)#
#
#
	if(exists("post.samp")){#
		ps=as.data.frame(post.samp)#
		colnames(ps)=fit$names[1:fit$nopar]#
		panel.hist <- function(x, ...)#
		{#
		    usr <- par("usr"); on.exit(par(usr))#
		    par(usr = c(usr[1:2], 0, 1.5) )#
		    h <- hist(x, plot = FALSE)#
		    breaks <- h$breaks; nB <- length(breaks)#
		    y <- h$counts; y <- y/max(y)#
		    rect(breaks[-nB], 0, breaks[-1], y, col=colr("blue", 0.5))#
		}#
		#
		n=dim(ps)[1]#
		ix = (n/2):n		#discard 1st half for burnin#
		pairs(ps[ix,1:5],pch=".",gap=0,col=c("orange"), #
			upper.panel=panel.smooth, #
			lower.panel=fried.egg, #
			diag.panel=panel.hist)#
		#
		#
		#now plot priors and martinal posteriors.#
		plot.marg <- function(ps,p1=0,p2=1,prior="dunif", mle=NULL, ...)#
		{#
			xl=range(ps)#
			hist(ps,breaks=30, prob=T, col=colr("tan",0.5), #
			ylab="Probability density", main="", ...)#
			#
			fn=match.fun(prior)#
			curve(unlist(lapply(x,fn,p1,p2)),#
				xl[1],xl[2],add=T, col=4, lty=1, lwd=2)#
			#
			abline(v=mle, col=colr("red",0.5), lwd=5)#
			#
		}#
		par(mfcol=c(3, 2),mar=c(4, 4, 2, 2), oma=c(2, 2, 2, 2))#
		plot.marg(exp(ps[ix,1]),8.0, 0.5,"dlnorm", xlab="K", mle=exp(fit$est[1]))#
		plot.marg(ps[ix,2],-1.38,0.51,"dlnorm", xlab="r", mle=fit$est[2])#
		plot.marg(exp(ps[ix,3])*1e4,0,1,"dunif", xlab="q (1e4)", mle=exp(fit$est[3])*1e4)#
		plot.marg(1/exp(ps[ix,4]),1.71, 0.0086,"dinvgamma",xlab="tau",mle=1/exp(fit$est[4]))#
		plot.marg(1/exp(ps[ix,5]),3.79,0.0102,"dinvgamma", xlab="sig",mle=1/exp(fit$est[5]))#
		plot.marg(ps[ix,2]*exp(ps[ix,1])/4, -15, 15, xlab="MSY", mle=fit$est[2]*exp(fit$est[1])/4)#
	}#
#
})#
#
#
run.Simulation<-#
function(N=10)#
{#
	theta <<- NULL#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i)#
		system(arg)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5])#
	}#
	boxplot(theta)#
}
run.Simulation(100)
boxplot(theta)
run.Simulation(10)
?
ls
#
run.Simulation<-#
function(N=10)#
{#
	theta <<- NULL#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i)#
		system(arg >NUL)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5])#
	}#
	boxplot(theta)#
}run.Simulation(10)
#
run.Simulation<-#
function(N=10)#
{#
	theta <<- NULL#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i)#
		system(arg >NUL)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5])#
	}#
	boxplot(theta)#
}run.Simulation(10)
#
run.Simulation<-#
function(N=10)#
{#
	theta <<- NULL#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i)#
		system(arg >NUL)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5])#
	}#
	boxplot(theta)#
}run.Simulation(10)
theta
boxplot(theta)
boxplot(theta)
boxplot(theta)
run.Simulation<-function(N=10)#
{#
	theta <<- NULL#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i >NUL)#
		system(arg)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5])#
	}#
	boxplot(theta)#
}#
#
#
run.Simulation()
#
run.Simulation<-function(N=10)#
{#
	theta <<- NULL#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i ,">NUL")#
		system(arg)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5])#
	}#
	boxplot(theta)#
}#
run.Simulation()
#
run.Simulation<-function(N=10)#
{#
	theta <<- NULL#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i ,">NUL")#
		system(arg)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5])#
	}#
	boxplot(theta)#
}#
run.Simulation()
#
run.Simulation<-function(N=10)#
{#
	theta <<- NULL#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i ,">NUL")#
		system(arg)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5])#
	}#
	boxplot(theta)#
}#
run.Simulation(100)
theta
p
ipar
#
run.Simulation<-function(N=10)#
{#
	theta <<- NULL#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i ,">NUL")#
		system(arg)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5])#
	}#
	boxplot(theta)#
}#
run.Simulation()
#
run.Simulation<-function(N=10)#
{#
	theta <<- NULL#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i ,">NUL")#
		system(arg)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5])#
	}#
	boxplot(theta)#
}#
run.Simulation()
ipar
run.Simulation<-function(N=10)#
{#
	theta <<- NULL#
	ipar<<-scan("pm.ctl",comment.char="#",skip=2)#
	ipar=log(ipar)#
	ipar[2]=exp(ipar[2])#
	ipar[4:5]=log(1/ipar[4:5])#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i ,">NUL")#
		system(arg)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5]/ipar)#
	}#
	boxplot(theta)#
}
run.Simulation()
ipar
#
run.Simulation<-function(N=10)#
{#
	theta <<- NULL#
	ipar<<-scan("pm.ctl",comment.char="#",skip=2)#
	ipar=log(ipar)#
	ipar[2]=exp(ipar[2])#
	ipar[4:5]=log(1/ipar[4:5])#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i ,">NUL")#
		system(arg)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5]/ipar[1:5])#
	}#
	boxplot(theta)#
}
rum.Simulation()
run.Simulation()
ipar
run.Simulation()
log(1/ipar[4:5])
log(1/ipar[4:5])
log(1/ipar[4:5])
#
run.Simulation<-function(N=10)#
{#
	theta <<- NULL#
	ipar<<-scan("pm.ctl",comment.char="#",skip=2)#
	ipar=log(ipar)#
	ipar[2]=exp(ipar[2])#
	ipar[4:5]=log(1/ipar[4:5]^2)#
	for(i in sample(1:1000,N))#
	{#
		arg = paste("./pm -sim", i ,">NUL")#
		system(arg)#
		print(arg)#
		P=read.fit("pm")#
		theta<<-rbind(theta, P$est[1:5]/ipar[1:5])#
	}#
	boxplot(theta)#
}
run.Simulation
run.Simulation()
run.Simulation()
run.Simulation()
ipar
theta
