#if !defined(_AS1_SIM_)
#  define _AS1_SIM_

class model_data : public ad_comm{
  int sim;
  int rseed;
  init_adstring datafile;
  init_adstring controlfile;
  data_int Nyear;
  data_int Nage;
  data_number Mval;
  data_vector Weight;
  data_number SigCatch;
  data_number SigCPUE;
  data_number Omega;
  data_matrix CatchCPUE;
  data_matrix Propn;
  dvector Catch;
  dvector CPUE;
  data_vector sim_logN;
  data_vector sim_logR;
  data_number sim_Sel50;
  data_number sim_Sel95;
  data_vector sim_logF;
  data_number sim_logq;
  data_number sim_sigmaProc;
  data_number sim_sigmaObs;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_vector logN1;
  param_init_vector logR;
  param_init_bounded_dev_vector recdevs;
  param_init_bounded_number Sel50;
  param_init_bounded_number Sel95;
  param_init_vector logF;
  param_init_number logq;
  param_matrix N;
  param_vector S;
  param_matrix F;
  param_matrix Z;
  param_vector Catch_pred;
  param_vector CPUE_pred;
  param_matrix Propn_pred;
  param_vector Catch_obs;
  param_vector CPUE_obs;
  param_matrix Propn_obs;
  param_vector Bio;
  param_number NLL1;
  param_number NLL2;
  param_number NLL3;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value objn;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void run_simulation(void);
  void Select(void);
  void Numbers(void);
  void Predict_Observations(void);
  void Likelihood(void);

};
#endif
